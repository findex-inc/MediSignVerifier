using NUnit.Framework;
using Org.BouncyCastle.Tsp;

namespace SignatureVerifier.Data.BouncyCastle
{
	internal class TimeStampTokenExtensionsTests
	{
		[Test]
		public void BouncyCastlePractice()
		{
			var tsaCertBase64 = @"MIIDqTCCApGgAwIBAgIBJTANBgkqhkiG9w0BAQsFADBlMQswCQYDVQQGEwJKUDEcMBoGA1UEChMT U2FtcGxlIE9yZ2FuaXphdGlvbjESMBAGA1UECxMJU2FtcGxlIENBMSQwIgYDVQQDExtUZXN0IENB IGZvciBUaW1lU3RhbXBTZXJ2ZXIwHhcNMTcwNjIxMTAyODEyWhcNMzMxMjMxMTUwMDAwWjBXMQsw CQYDVQQGEwJKUDENMAsGA1UEChMETURJUzEdMBsGA1UECxMURmluYW5jaWFsIERlcGFydG1lbnQx GjAYBgNVBAMTEVRpbWVTdGFtcFNlcnZlcjAxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC AQEA2JNfR4b84cuqx+Obf2FX5lFK45RoxqvCrjvuNT5vbWZGinnmPqIwgZiiOw7qV2GZCN6l3VuI 87Ds+NE6Fd9APTo7KOCUXnn+Q4IMp11s+++dnq7/n8UDEH/Y/0w4Hgco4WT9r5QWobNCdvmkWpuv p5wm78msw+nGMThROIMQN90uyuId6aSWEZwDcqLRoaIOaY4KXW52w5WOfNjZxw9znHtFTW5QWVOP 2DfS+ET+iwwT8kkOxHj5oYlxThSgBAkA536RtKmZHCcRsdaliNPFBKaiQWP7CrjSGuab/l7e3BoI QA3cPmKCSym45amHgBYZq0WaT/BXNkCM2QXhdpPq6QIDAQABo3IwcDAdBgNVHQ4EFgQUwhY9pQih RxKqVHBuco0PGQvHJtUwHwYDVR0jBBgwFoAUPtzxR5kBmsO6I2N+kGCWAlXEuOIwCQYDVR0TBAIw ADALBgNVHQ8EBAMCBsAwFgYDVR0lAQH/BAwwCgYIKwYBBQUHAwgwDQYJKoZIhvcNAQELBQADggEB AGw6XGu2+k2EqUWx7aSVf8E8c+vMdG3lCuTbPz7Et4WRvUT1NZRbLEBpf8GRC4X+SOs489j+rQ0g jgi4u4Q1aI+NrN5bf1q4OaRkbPwuiWpxYdwmCjaswmZGY83NXrVjqRE1jYnH6cl0gc8O6z3JpxvE 9qgODyHqsTzwy4sIS8V/gJVXyPPLh4wUtfR3aTPvjZgMkCUGSLz4wBdEkwtZKfVGnAmn/BGVlMsp sbuRBOaottZCuOnkOy4V9Y98cG2P7mrYczy+LLoKZ4125yRTAGXCCn1svmPjwMufmaAcY4bHpKpK ZL8+r21bUo/DjhYSRIIEeARFIgTv0m1KnP5AGE0=";
			var tsaCACertBase64 = @"MIIEFzCCAv+gAwIBAgIJAIK9bBWUV3OZMA0GCSqGSIb3DQEBCwUAMGUxCzAJBgNVBAYTAkpQMRww GgYDVQQKExNTYW1wbGUgT3JnYW5pemF0aW9uMRIwEAYDVQQLEwlTYW1wbGUgQ0ExJDAiBgNVBAMT G1Rlc3QgQ0EgZm9yIFRpbWVTdGFtcFNlcnZlcjAeFw0xNzA2MjExMDI4MDZaFw0yNzA2MjkxMDI4 MDZaMGUxCzAJBgNVBAYTAkpQMRwwGgYDVQQKExNTYW1wbGUgT3JnYW5pemF0aW9uMRIwEAYDVQQL EwlTYW1wbGUgQ0ExJDAiBgNVBAMTG1Rlc3QgQ0EgZm9yIFRpbWVTdGFtcFNlcnZlcjCCASIwDQYJ KoZIhvcNAQEBBQADggEPADCCAQoCggEBAM7FtYwz28X2bandNM4hJk3zsObkM/apz7eyFl7Jbd6O v3ZmDlrjv9ADHaOMcMi3VwqGdcHg2GLbJ+ev2iI/7oPDRWA4CbUZq5XSsHg/aXSWfDzNKV2fMbjq j8Y0AZx9HKDonCRTimRhhyqvk4wXj1FqzNxbVyMlJkr6eddOXZ/s4inxt/F7HZ32Lgdiy62JA8Ji yUTgwXvOHmtyPjTGvVvBurkWfKgklxHDPryupM7VMsA0Ii32QZWAaTBHfw68bCotQJTmEl9qgAIs ZUgLj0Q7iF+r67zfVkcMKecVkPPNtyvd1MaAlmJb+w7rrKwAVkBqAkLwMjaQ1MMNJ+b+eYcCAwEA AaOByTCBxjAdBgNVHQ4EFgQUPtzxR5kBmsO6I2N+kGCWAlXEuOIwgZcGA1UdIwSBjzCBjIAUPtzx R5kBmsO6I2N+kGCWAlXEuOKhaaRnMGUxCzAJBgNVBAYTAkpQMRwwGgYDVQQKExNTYW1wbGUgT3Jn YW5pemF0aW9uMRIwEAYDVQQLEwlTYW1wbGUgQ0ExJDAiBgNVBAMTG1Rlc3QgQ0EgZm9yIFRpbWVT dGFtcFNlcnZlcoIJAIK9bBWUV3OZMAsGA1UdDwQEAwIBBjANBgkqhkiG9w0BAQsFAAOCAQEAJH9B QOXJQGP91iKWHWNYWAx7pPGDYIw2HV9HvuWqfz9PDTq7cr2CDl3WltwZzp0xe7vz9bCggmRrodoN GRUDG3aYXHgWfGtZpviJTKa0k65eCCFWIBz9K69sLkLtHUs/GqpcVon6XIKCWv2UcGhmFKT6slx7 3f3V4+MuDDsSUc3k2kNMqBBo43fy7Kv8hY6z6XDcjX7VQAlgeS2uddLb84eMM8ekOVSfZj4CSWGs +J6WHdPj/48Y5hv3Y1dgLf4qIdv187iuSdDB435KwFUuHjewf+jAzbNVMzdzz3pjG0M3ZIXplE2B Q0vYK5wir7YCpFqEj1ffA/emGE2FoWJNSA==";
			var encupslatedTimeStampBase64 = @"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 BMlkLuXc5/v3F7n76Jxhl4sdT84=";

			var tsCert = tsaCertBase64.ToBytes().ToX509Certificate();
			var caCert = tsaCACertBase64.ToBytes().ToX509Certificate();
			var cmsData = encupslatedTimeStampBase64.ToBytes().ToCmsSignedData();

			var tsToken = new TimeStampToken(cmsData);

			var result = true;

			if (tsToken.SignerID.Match(tsCert)) {
				tsToken.Validate(tsCert);
			}
			else {
				//証明書がTSA証明書と一致しない
				result = false;
			}

			if (!tsToken.GetSignerCertificate().Equals(tsCert)) {
				result = false;
			}

			var msgHashAlgName = tsToken.TimeStampInfo.GetMessageImprintAlgorithm().DigestAlgorithmName();
			var msgHash = tsToken.TimeStampInfo.GetMessageImprintDigest(); //これとタイムスタンプ対象のハッシュ値を比較

			var tsaSignerInfo = tsToken.GetSignerInfo();
			var signerInfoDigestAlgName = tsaSignerInfo.GetDigestAlgorithm().DigestAlgorithmName();
			var signerInfoSignatureAlgName = tsaSignerInfo.GetSignatureAlgorithm().SignatureAlgorithmName();

			var certID = tsToken.GetCertID();

			var calculatedCertHash = tsCert.CalculateDigest(certID.HashAlgorithm);

			Assert.Multiple(() =>
			{
				//Validate result
				Assert.That(result, Is.True);

				//CMS ContentTypeがsigned-dataの識別子であること
				Assert.That(cmsData.IsSignedData(), Is.True);

				//署名対象(eContentType)がTSTInfoのオブジェクト識別子であること
				Assert.That(cmsData.IsTstInfo(), Is.True);

				//signerInfoのdigestAlgorithm (対応していれば名称がセットされている)
				Assert.That(signerInfoDigestAlgName, Is.EqualTo("SHA-512"));

				//signerInfoのsignatureAlgorithm (対応していれば名称がセットされている)
				Assert.That(signerInfoSignatureAlgName, Is.EqualTo("SHA-512withRSA"));

				//MessageImprintのhashAlgorithm (対応していれば名称がセットされている)
				Assert.That(msgHashAlgName, Is.EqualTo("SHA-256"));

				//SigningCertificateのハッシュ値確認
				Assert.That(calculatedCertHash, Is.EqualTo(certID.CertHash));

				//signerInfoのハッシュ値比較（MessageDigest）Verifyの後
				Assert.That(tsaSignerInfo.GetContentDigest(), Is.EqualTo(tsToken.GetMessageDigest()));
			});
		}
	}
}
